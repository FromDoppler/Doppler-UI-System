////
/// Functions
/// @group Functions
/// @author Damian Muti
////
/// Convert to EMs function
/// @param {number} target - The value to be converted
/// @param {number} context [$dsf-font-size] The base font size
/// @return {em} value
@function toem($target, $context: $dsf-font-size) {
  @if $target == 0 {
    @return 0
  }
  @return $target / $context+0em;
}
/// Convert to REMs function
/// @param {number} target - The value to be converted
/// @param {number} context [$dsf-font-size] - The base font size
/// @return {rem} value
@function torem($target, $context: $dsf-font-size) {
  @if $target == 0 {
    @return 0
  }
  @return $target / $context+0rem;
}
/// Remove unit from value
/// @param {number} value - The entire value
/// @return {number} The striped value
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}
/// Lighten a color
/// @param {string | Color} color - The color to be lighten
/// @param {number} percentage - The percent to be lighten
/// @return {string | Color} color
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}
/// Darken a color
/// @param {string | Color} color - The color to be darken
/// @param {number} percentage - The percent to be darken
/// @return {string | Color} color
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}
/// Explode a string in a PHP fashion
/// @param {string} string - Target string
/// @param {string} delimiter - Delimiter character
/// @return {string} Exploded string
@function str-explode($string, $delimiter) {
  $list: ();
  $sum: str-length($string);
  @for $i from 1 through $sum {
    $str: str-index($string, $delimiter);
    @if str-length($string) >= 1 and $str == null {
      $list: append($list, $string, comma);
      $string: '';
    }
    @if type-of($str)==number {
      $each: str-slice($string, 0, ($str - 1));
      $list: append($list, $each, comma);
      $string: str-slice($string, ($str + 1), $sum);
    }
  }
  @if length($list) > 1 {
    @return '.'+nth($list, 2);
  } @else {
    @return nth($list, 1);
  }
}
/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {string} $string - Initial string
/// @param {string} $search - Substring to replace
/// @param {string} $replace ('') - New value
/// @return {string} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}
/// String URL encode function
/// @param {string}
/// @return {string} - URL encoded string
@function url-encode($string) {
  $map: (
    "%": "%25",
    "<": "%3C",
    ">": "%3E",
    " ": "%20",
    "!": "%21",
    "*": "%2A",
    "'": "%27",
    '"': "%22",
    "(": "%28",
    ")": "%29",
    ";": "%3B",
    ":": "%3A",
    "@": "%40",
    "&": "%26",
    "=": "%3D",
    "+": "%2B",
    "$": "%24",
    ",": "%2C",
    "/": "%2F",
    "?": "%3F",
    "#": "%23",
    "[": "%5B",
    "]": "%5D"
  );
  $new: $string;
  @each $search, $replace in $map {
    $new: str-replace($new, $search, $replace);
  }
  @return $new;
}
/// URL-encode color SASS function / convert color to hex SASS function.
/// @param {color} $color - Hex color value to convert.
/// @return {string} URL-encode color value.
@function color-encode($color) {
  @if type-of($color) == 'color' {
    $hex: str-slice(ie-hex-str($color), 4);
    $color: unquote("#{$hex}");
  }
  $color: '%23' + $color;
  @return $color;
}
/// Generates an SVG with a given fill color depending on the type of icon passed as parameter. The SVG string is scaped for cross-browser support.
/// @param {string} $icon - Type of icon.
/// @param {color} $color - Passes the fill color of the SVG icon that is being generated.
/// @return {string} background value.
@function get-icon($icon, $color) {
  @return url('data:image/svg+xml;utf8,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20width%3D%22512%22%20height%3D%22512%22%20viewBox%3D%220%200%20512%20512%22%3E%3Cpath%20fill%3D%22' + color-encode($color) + '%22%20d%3D%22' + $icon + '%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E') center / cover no-repeat;
}
/// Get values in a multidimentional map
/// @author Hugo Giraudel
/// @param {map} $map - Map
/// @param {arglist} $keys - Keys to fetch
/// @return {*}
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}
/// Returns the opposite direction of each direction in a list
/// @author Hugo Giraudel
/// @param {list} $directions - List of initial directions
/// @return {list} - List of opposite directions
@function opposite-direction($directions) {
  $opposite-directions: ();
  $direction-map: (
    'top': 'bottom',
    'right': 'left',
    'bottom': 'top',
    'left': 'right',
    'center': 'center',
    'ltr': 'rtl',
    'rtl': 'ltr'
  );
  @each $direction in $directions {
    $direction: to-lower-case($direction);
    @if map-has-key($direction-map, $direction) {
      $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
    } @else {
      @warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
    }
  }
  @return $opposite-directions;
}
/// Evaluates if the passed $color is light or dark based on how close it is to black or white
/// @author Mike Kelly - <https://medium.com/@mkel23> with some minor tweaks
/// @param {color} $color - Color value to be evaluated
/// @return {string} Whether a color is `light` or `dark`
@function get-luminosity($color) {
  @if type-of($color) != color {
    @error "Color must be a valid color value. E.g: `#000000`.";
  }
  $r: red($color);
  $g: green($color);
  $b: blue($color);
  // Convert color to YIQ
  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;
  @return if($yiq >= 128, light, dark);
}
/// Returns the complementary value of a given color
/// @param {color} $color - Color value to get the complementary value from
/// @param {number} $percentage [30%] - Percentage of difference between the given color and the complementary value
/// @return {color} Complementary color value
@function complementary-color($color, $percentage: 30%) {
  @if type-of($color) != color {
    @error "Color must be a valid color value. E.g: `#000000`.";
  }
  @if type-of($percentage) != number {
    @error "Percentage must be a percentage value. E.g: `30%`.";
  }
  $eval: get-luminosity($color);
  @return if($eval == light, shade($color, $percentage), tint($color, $percentage));
}